#if 0
  ////////////////////////////////////////////////////////////////
  // lj-indexed radial matrices
  //
  ////////////////////////////////////////////////////////////////

  // TODO: define struct ljPair, with elements l and j, constructor ljPair(l,j)

  class RadialMatriceslj{

  public:

        
    ////////////////////////////////////////////////////////////////
    // type definitions for internal storage
    ////////////////////////////////////////////////////////////////

    typedef  PairLookupArray< double >  RadialMatrixType;
    typedef RadialMatrixContainer std::map< std::pair< ljPair, ljPair>, RadialMatrixType >;

    ////////////////////////////////////////////////////////////////
    // constructors
    ////////////////////////////////////////////////////////////////

    // construct with given truncation parameters
    //   N1b_max: maximum HO N quantum number for single-particle truncation
    //   nu: is power of radial operator (determines parity selection)
    //   lambda_max: determines multipolarity selection on l and j
    //
    // Constraints on (lb,jb)x(la,ja) sectors are:
    //    ...
    // Note: nu=0 supports overlaps
    RadialMatriceslj(int N1b_max, int nu);

    //TODO: will construct sector_list_ based on selection rules,
    // will allocate a matrix for each sector within map

    ////////////////////////////////////////////////////////////////
    // input/output
    ////////////////////////////////////////////////////////////////

    void Read(const std::string& is_name);
    void Write(const std::string& is_name);

    ////////////////////////////////////////////////////////////////
    // accessors
    ////////////////////////////////////////////////////////////////
  
    RadialMatrixType& RadialMatrix(int lb, HalfInt jb, int la, HalfInt ja);

    ////////////////////////////////////////////////////////////////
    // deallocation
    ////////////////////////////////////////////////////////////////
  
    void Free ();

  private:

    ////////////////////////////////////////////////////////////////
    // internal storage
    ////////////////////////////////////////////////////////////////

    std::list,ljPair> sector_list_;
    RadialMatrixContainer radial_matrices_;
  };

#endif

