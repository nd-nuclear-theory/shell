Installation instructions: shell and spncci projects

+ 3/7/16 (aem,mac): Created (spncci install instructions).
+ 4/19/16 (mac): Update.
+ 5/3/16 (mac): Update.
+ 5/17/16 (mac): Overhaul instructions.  Update repository location and branch.
+ 10/28/16 (mac): Update git pull notes.
+ 10/28/16 (mac): Branched off shell install instructions.
+ 10/29/16 (mac): Updated with pjf's Intel compilation fix.
+ 10/31/16 (mac): Update for Cori.
+ 11/4/16 (mac): Update h2stat example.
+ 11/8/16 (mac): Merge shell and spncci install.
  - Overhaul and clearly mark cluster-specific instructions.
  - Merge in notes from install_NDCRC.txt, created 6/29/16 (aem).
+ 11/13/16 (mac): Update shell h2mixer example.
+ 12/22/16 (mac):
  - Rename NERSC config files from "...-craype.mk" to
    "...-nersc.mk".
  - Add NDCRC config files.

----------------------------------------------------------------

1) Retrieving source

  Change to the directory where you want the repository to be installed,
  e.g.,

  % cd ~/projects

  Clone the shell repository and all submodules.  You will be asked for
  your ND netid password several times.  In the following, replace
  "netid" with your ND NetID.

  For "shell":

  % git clone --recursive ssh://netid@crcfe01.crc.nd.edu/afs/crc.nd.edu/group/nuclthy/git/shell.git

  For "spncci":

  % git clone --recursive ssh://netid@crcfe01.crc.nd.edu/afs/crc.nd.edu/group/nuclthy/git/spncci.git

  Then change your working directory (cd) to the project directory for
  all the following steps.

  || Workaround: If the process hangs, kill with Ctrl-C, clean up with "rm
  || -rf shell", and try again.  If it keeps hanging, split up the
  || process...
  || 
  ||   % git clone ssh://netid@crcfe01.crc.nd.edu/afs/crc.nd.edu/group/nuclthy/git/shell.git
  ||   % cd shell
  ||   % submodule init
  ||   % submodule update
  || 
  || and repeat submodule update until all submodules have been successfully cloned.
 
1') Subsequently updating source

  % git pull
  % git submodule update

2) Compiler

  If compiling with gcc, version 4.8 or higher is needed, for the
  full C++11 functionality.

  || @NDCRC: For gnu:
  ||
  || % module load gcc/4.9.2

  || @NERSC: Even if using the intel compiler suite, loading GCC 4.8+
  || (for C++11 compatibility) is still required, since gcc is used
  || internally by icpc:
  || 
  || % module load gcc
  ||
  || If you prefer to switch from the intel compiler to the gnu
  || compiler:
  || 
  || % module swap PrgEnv-intel PrgEnv-gnu

3) Libraries

  Boost: Make sure Boost is installed and that the environment
  variable BOOST_ROOT points to this installation (unless the
  installation is already in the compiler's default search path,
  e.g., in /usr/local).

  || @NDCRC: For use with gcc/4.9.2:
  ||   
  || % module load boost/1.58

  || @NERSC:
  ||
  || % module load boost

  GSL: Make sure GSL is installed and that the environment variable
  GSL_DIR points to this installation (unless the installation is
  already in the compiler's default search path, e.g., in
  /usr/local).

  || @NDCRC:
  ||
  || % module load boost

  || @NERSC:
  ||
  || % module load gsl

  Eigen (version 3): The Eigen library is a template library, so
  there are no compiled binaries, just header files.  The environment
  variable EIGEN_DIR should be set to point to the parent directory
  of a tree containing these files, specificially, be sure that the
  tree looks like "include/eigen3/Eigen/<headers>".  Here, <headers>
  represents the files {Array,Cholesky,...}.  While the Eigen library
  is available as a module on systems, it is often preferable to
  download the latest version and move the header files into a tree
  like this.

  || @NDCRC: We use our own copy, in the nuclthy project space.
  ||
  || % setenv EIGEN3_DIR /afs/crc.nd.edu/group/nuclthy/opt/eigen-3.2.10

  || @NERSC: Although Eigen is installed as a module on Edison, the
  || installation tends to lag, and Eigen is missing from Cori
  || (10/31/16).  So we use our own copy, in the m2032 project space.
  ||
  || % setenv EIGEN3_DIR /global/project/projectdirs/m2032/opt/eigen-3.2.10

4) Makefile configuration

  You need to create a symbolic link "config.mk" to point to the
  correct configuration file.  On a generic system, you can use the
  predefined configuration files in shell/config:

     config/config-gnu.mk -- for GNU gcc 4/5/6
     config/config-intel.mk -- for Intel

  e.g., for compiling under gcc:

  % ln -s config/config-gnu.mk config.mk

  For HPC systems with more specialized compiler invocations, you can
  probably "wrap" one of these generic config files as in include
  file, then overriding a few variable settings.  See
  config/config-gnu-nersc.mk as an example.

  || @NDCRC: For compiling under gcc:
  || 
  || % ln -s config/config-gnu-ndcrc.mk config.mk
  || 
  || For compiling under intel:
  || 
  || % ln -s config/config-intel-ndcrc.mk config.mk
  ||
  || Actually, the generic config gnu or intel config files would work
  || just fine at the NDCRC, but it is good to have the framework in
  || place to easily add flags specific to the NDCRC, e.g.,
  || architecture optimizations.

  || @NERSC: For compiling under gcc:
  || 
  || % ln -s config/config-gnu-nersc.mk config.mk
  || 
  || For compiling under intel:
  || 
  || % ln -s config/config-intel-nersc.mk config.mk
  || 
  || It is important to use these "...-nersc.mk" config files, since
  || they configure make to invoke the correct Cray Programming
  || Environment compiler wrapper "CC" to generate optimized executables
  || for the compute nodes and to link to the correct libraries.

5) Build

  As a shortcut, it is convenient to collect all the above module
  loads and setenv commands into a single file, which can be sourced
  before attempting a build:

  % source config/module-load-<my_system>.csh

  Important: This needs to be *sourced* into csh (not run as a script)
  so that the environment variable definitions are retained by the
  shell.

  || @NDCRC:
  || 
  || % source config/module-load-ndcrc.csh

  || @NERSRC:
  || 
  || % source config/module-load-nersc.csh

  Then, "make all", and a parallel make (with the -j option) is
  strongly recommended for speed:

  % make all -j8

  To copy all executable binaries to the directory install/bin:

  % make install

  || @NERSC: We need to keep binaries for different architectures
  || separate.  The files will be installed to
  || install/$(CRAY_CPU_TARGET)/bin, e.g., install/haswell/bin or
  || install/mic-knl/bin.

  You may wish to define the environment variable SHELL_DIR to point
  to the installation directory, so that you can then run, e.g.,

     ${SHELL_DIR}/bin/h2mixer

  in scripts.

6) Sanity check (for shell project):

   % cd programs/h2utils
   % ./h2mixer < test/h2mixer_identity-v0.in
   % ./h2stat --verify test/tbme-identity-tb-2-v0.dat
   % ./h2stat --verify test/tbme-identity-tb-2-v0.bin

   You should see something like the following output:

      h2stat  -- MFDn H2 file statistics

      Input stream
        File: test/tbme-identity-tb-2-v0.dat
        Format: 0 (text)
        Orbitals: p 6 n 6 (oscillator-like true)
        Truncation: p 2.0000 n 2.0000 pp 2.0000 nn 2.0000 pn 2.0000
        Sectors: pp 7 nn 7 pn 7 => total 21
        Matrix elements: pp 32 nn 32 pn 110 => total 174

      Mode: verify

      Verification scan
      .....................
      (Total time: 0)

   You can also try out the conversion code h2conv:

   % ./h2conv 15099 test/tbme-identity-tb-2-v0.dat test/tbme-identity-tb-2-v15099.dat

----------------------------------------------------------------

Notes:

3/7/16+ (aem): To install boost under OS X:

  brew install boost

Updating g++:

  brew install gcc --use-llvm

3/7/16+ (aem, mac): Static linking to system libraries under OS X is
problematic.  Cannot static link against libcrt0.  So do not include
-static compiler flag in config.mk.

3/7/16+ (mac): Example of extracting the Eigen3 headers from a
freshly-downloaded tgz file.  Say you have downloaded
eigen-eigen-b30b87236a1b.tar.gz and want to install it to
<groupdir>/opt/eigen-3.2.7:

   % tar xvf eigen-eigen-b30b87236a1b.tar.gz
   % mkdir --parents <groupdir>/opt/eigen-3.2.7/include/eigen3
   % mv eigen-eigen-b30b87236a1b/Eigen <groupdir>/opt/eigen-3.2.7/include/eigen3/
   % rm -r eigen-eigen-b30b87236a1b

6/29/16 (aem, mac): @NDCRC: When cloning on the NDCRC, one can use direct
file access rather than ssh access.

  In general 
  
  % git clone --recursive /afs/crc.nd.edu/group/nuclthy/git/spncci.git
  
  or since most of the changes havenâ€™t been merged to master, including submodules 
  
  % git clone --recursive /afs/crc.nd.edu/group/nuclthy/git/spncci.git --branch devel

10/28/16 (mac): @NERSC: For reference, we note that the following are
the current default versions on Edison as of 10/29/16:

  % module load gcc/6.1.0
  % module load boost/1.54
  % module load gsl/1.16
  % module load eigen3/3.2.0 

Note: This is a pretty old version of eigen which gives lots of
warnings under gcc.

Successful build with gnu (PrgEnv-gnu => gcc/6.1.0).  Failing build
with intel (PrgEnv-intel => intel/15.0.1.133).

10/29/16 (pjf e-mail): @NERSC: I just found a particularly nasty
interaction between compilers on NERSC. It appears that, internally,
icpc calls gcc. The simple answer is, you need to have at least GCC
4.8 loaded. Call 'module load gcc/4.8.0' or higher (the default 6.1.0
is preferred). It's probably a good idea to call 'module load
intel/16.0.0.109' or 'module load intel/17.0.0.098' to get a newer
version of icpc too.

10/31/16 (mac): @NERSC: Successful builds on Cori with gcc and intel:

  PrgEnv-gnu/6.0.3 => gcc/5.3.0 
  gcc/5.3.0
  boost/1.61
  gsl/2.1
  m2032/opt/eigen-3.2.10

  PrgEnv-intel/6.0.3 => intel/16.0.3.210
  gcc/5.3.0
  boost/1.61
  gsl/2.1
  m2032/opt/eigen-3.2.10

11/20/16 (mac): @NERSC: On Edison, successful build with gnu, but
failed build with intel.  Is it an issue with the older intel
compiler?  Chokes on std::vector<Eigen::MatrixXd>.

  PrgEnv-gnu/5.2.56 => gcc/6.1.0
  gcc/6.1.0
  boost/1.54
  gsl/1.16 
  m2032/opt/eigen-3.2.10

  PrgEnv-intel/5.2.56 => intel/15.0.1.133
  gcc/6.1.0
  boost/1.54
  gsl/1.16 
  m2032/opt/eigen-3.2.10

12/22/16 (mac): @NDCRC: We will include the ompi module in
module-load-ndcrc, even though not currently needed, both convenience
when compiling LSU3shell and for future MPI support.
