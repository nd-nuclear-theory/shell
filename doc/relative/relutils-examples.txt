Examples for Notre Dame relative interaction utilities

URL: https://github.com/nd-nuclear-theory/shell/doc/relative

History:
  10/28/17 (mac): Created as lsjt-relative-format.txt.
  12/18/17 (mac): Add rsqr and ksqr examples.
  12/19/17 (mac): Add Moshinsky examples.
  12/20/17 (mac):
    - Extract examples as relutils-examples.txt.
    - Reorganize by operator.
    - Add jpv2rel examples.
  05/04/18 (mac): Add isovector operators.
  05/05/18 (mac): Add dipole operator.

----------------------------------------------------------------

The examples subdirectory contains example interaction data files in the Notre Dame lsjt-relative format.

Mixed in with these are example input files for the relutils codes that work with these files:

   jpv2rel -- to convert relative matrix element files Iowa State
   (JPV) format to lsjt relative format

   relative-gen -- to generate lsjt relative format files for certain
   operators analytically

   moshinsky -- to Moshinsky transform interactions given in lsjt
   relative format

The examples are broken out by operator, as described below.

--------------------------------

jisp16: JISP16 interaction, hw=20 MeV

   This is an example of an *isoscalar* interaction file provided in
JPV format.

   We start from the relative matrix elements are given in JPV format
in

   Vrel_JISP16_bare_Jmax4.hw20

This file was retrieved from the NERSC m94 project directory
(10/22/2014), specifically, from

   /project/projectdirs/m94/hamilops/Vrel_JISP16_bare_Jmax4

   To identify the truncation of this file, you can run jpvstat on
this file:

   jpvstat Vrel_JISP16_bare_Jmax4.hw20 > Vrel_JISP16_bare_Jmax4.hw20_jpvstat.out

This utility will parse the sector headers and display diagnostic
statistics.  Properly interpreting these requires digesting JPV's
readme file.  Rather, you should see the initial code comments in
libraries/relative/jpv_io.h for a detailed explication of the JPV
format.  But you will see that this original file goes to high
relative Nmax~238.
   
   To convert to lsjt relative format, and simultaneously truncate to
a more modest number of relative quanta (we choose Nmax20 for this
example), we run jpv2rel:

   jpv2rel < jisp16_Nmax20_hw20.0_rel.in > jisp16_Nmax20_hw20.0_rel.out

   We can then Moshinsky transform to h2 format.  To keep the example
files small, let us choose a relative two-body truncation of Nmax02
for the output h2 file.

   For illustration, we output to two different formats:

(1) The usual storage scheme (on m94) for interactions would be h2
format version 0.  This is the older format which only supports scalar
operators in oscillator representation.  And we choose the binary
(.bin) version of this format, which, compared to ASCII format, is
vastly more compact and vastly faster in I/O.

   moshinsky < jisp16_Nmax02_hw20.0_h2v0-bin.in > jisp16_Nmax02_hw20.0_h2v0-bin.out

Note: Although we name the output tbme file
jisp16_Nmax20_hw20.0_h2v0.bin in this example, in order to match the
filename format expected later on by the scripting we would want to
rename this output file to JISP16-tb-2-20.bin.

(2) Alternatively, to illustrate what this would look like in the
newer h2 version 15099, and in human readable ASCII (.dat) format:

   moshinsky < jisp16_Nmax02_hw20.0_h2v15099-dat.in > jisp16_Nmax02_hw20.0_h2v15099-dat.out

----------------------------------------------------------------

coulomb: Coulomb interaction

This is an example of an analytically generated (well, from a formula involving
a numerical radial integral) non-isoscalar relative interaction.
   

   - coulomb_Nmax{02,20}_*_rel.dat: Coulomb operators (p = proton-only, n =
     neutron-only, total = isoscalar), for oscillator length b=1

     Generated by numerical integration, with relative-gen, using 500
     spline steps for integration.

     For conversion from these dimensionless Coulomb integrals with
     oscillator length b=1 to physical Coulomb matrix elements at
     given hw, see Appendix below.

----------------------------------------------------------------

coordinate-sqr (a.k.a. kinematic):

   - {rsqr,ksqr}_Nmax0[26]_rel.dat: isoscalar relative r^2 and k^2 operators

   - {rsqr,ksqr}-1_Nmax0[26]_rel.dat: *isovector* relative r^2 and k^2 operators

   Generated from SU(1,1) radial matrix element expressions, with relative-gen.
   (commit f06f17f).

   Then Moshinsky transformed to give TBMEs in *_h2v15099.dat.

----------------------------------------------------------------

dipole:

   - dipole_Nmax02_rel.dat: (isovector) relative quadrupole operator

   Generated from SU(1,1) radial matrix element expressions, with
   relative-gen.

   Then Moshinsky transformed to give TBMEs in *_h2v15099.dat.

----------------------------------------------------------------

quadrupole:

   - quadruople_Nmax02_rel.dat: isoscalar relative quadrupole operator

   - quadruople-1_Nmax02_rel.dat: *isovector* relative quadrupole operator

   Generated from SU(1,1) radial matrix element expressions, with
   relative-gen.

   Then Moshinsky transformed to give TBMEs in *_h2v15099.dat.

----------------------------------------------------------------

angular momentum:

   - {orbital,spin}-am_Nmax02_total_rel.dat: isoscalar relative L and S operators

   - {orbital,spin}-am-1_Nmax02_total_rel.dat: *isovector* relative L and S operators

   Generated with relative-gen.

   Then Moshinsky transformed to give TBMEs in *_h2v15099.dat.

---------------------------------------------------------------

Appendix

     To convert dimensionless Coulomb integrals with b=1 to physical
     Coulomb matrix elements at given hw, multiply by:

       <Vphys>/<V(b=1)> = e^2 / b

     with length

       b = (hc)/[(m_N c^2)(hw)]^(1/2)

     and constants

       hc ~ 197.327 MeV fm   ("h" means hbar)
       m_N c^2 ~ 938.92 MeV
       e^2 = (alpha)(hc)  in Gaussian units
       alpha ~ 1 / 137.035 

     Thus,

       <Vphys>/<V(b=1 fm)> = alpha [(m_N c^2)(hw)]^(1/2)

     For hw=20 MeV,

       <Vphys>/<V(b=1 fm)> ~ 0.999995   (!!!)

     Precision is limited here by the 5 digits we kept in the code
     "definition" of the nucleon mass!  To within that precision, the
     conversion factor is unity!  So a file of dimensionless Coulomb
     integrals calculated for b=1 is easily confused with a file of
     physical Coulomb matrix elements calculated for hw=20 MeV!

     5/6/18 (mac): But...  The ratio of calculated matrix elements is actually

     1   1   1   1   0  11    7.9783726e-01  # old MFDn
     1   1   1   1   0   0 11   +7.9788458e-01  # from relative

     => (MFDn)/(present) ~ 0.999940693178.  While the expected ratio computed
     from the above expressions is 0.999994908418.  Those look the same, until
     you count the "9"s...
